---
import type { Performance } from "../data/Performance";
import { Image } from "astro:assets";

export interface Props {
	performance: Performance;
	index: number;
	timeframe: PerformanceTimeframe;
}

const { title, startTime, endTime, location, description, imageURL } = Astro.props.performance;
const { index, timeframe } = Astro.props;

// Import landscape images
import landscape1 from "../../../assets/images/landscapes/IMG_2213.jpeg";
import landscape5 from "../../../assets/images/landscapes/IMG_2431.jpeg";
import landscape3 from "../../../assets/images/landscapes/IMG_2568.jpeg";
import landscape4 from "../../../assets/images/landscapes/IMG_3158.jpeg";
import landscape2 from "../../../assets/images/landscapes/skyline_from_a_distance.jpg";
import { PerformanceTimeframe } from "../data/PerformanceTimeframe";

// Use a default image
const defaultImage = landscape1.src;

const monthDayYearString = () => {
	const options: Intl.DateTimeFormatOptions = {
		year: "numeric",
		month: "long",
		day: "numeric",
		weekday: "long",
	};
	return new Intl.DateTimeFormat("en-US", options).format(startTime);
};

const startToEndTimeString = () => {
	const options: Intl.DateTimeFormatOptions = {
		hour: "2-digit",
		minute: "2-digit",
	};
	return endTime
		? new Intl.DateTimeFormat("en-US", options).format(startTime) +
				" - " +
				new Intl.DateTimeFormat("en-US", options).format(endTime)
		: new Intl.DateTimeFormat("en-US", options).format(startTime);
};

// Generate Google Calendar URL
const generateGoogleCalURL = () => {
	const startTimeISO = startTime.toISOString().replace(/-|:|\.\d+/g, "");
	const endTimeISO = endTime ? endTime.toISOString().replace(/-|:|\.\d+/g, "") : "";

	let url = "https://www.google.com/calendar/render?action=TEMPLATE";
	url += `&text=${encodeURIComponent(title)}`;
	url += `&dates=${startTimeISO}/${endTimeISO || startTimeISO}`;
	if (location) url += `&location=${encodeURIComponent(location)}`;
	if (description) url += `&details=${encodeURIComponent(description)}`;

	return url;
};

// Generate iCal file content
const generateICalContent = () => {
	const startTimeISO = startTime.toISOString().replace(/-|:|\.\d+/g, "");
	const endTimeISO = endTime ? endTime.toISOString().replace(/-|:|\.\d+/g, "") : startTimeISO;

	let icalContent = [
		"BEGIN:VCALENDAR",
		"VERSION:2.0",
		"PRODID:-//hacksw/handcal//NONSGML v1.0//EN",
		"BEGIN:VEVENT",
		`UID:${startTimeISO}-${Math.random().toString(36).substring(2, 11)}`,
		`DTSTAMP:${new Date().toISOString().replace(/-|:|\.\d+/g, "")}`,
		`DTSTART:${startTimeISO}`,
		`DTEND:${endTimeISO}`,
		`SUMMARY:${title}`,
		location ? `LOCATION:${location}` : "",
		description ? `DESCRIPTION:${description}` : "",
		"END:VEVENT",
		"END:VCALENDAR",
	]
		.filter(Boolean)
		.join("\r\n");

	return "data:text/calendar;charset=utf8," + encodeURIComponent(icalContent);
};

// Function to cycle through landscape images based on index
const getBackupImage = (index: number) => {
	const images = [landscape1, landscape2, landscape3, landscape4, landscape5];
	const imageIndex = index % images.length;
	return images[imageIndex];
};

// Function to format location by removing zip code and country
const formatLocation = (location: string) => {
	if (!location) return "";

	// Remove zip codes (both US 5-digit and extended formats)
	let formatted = location.replace(/\b\d{5}(-\d{4})?\b/g, "");

	// Remove common country names and abbreviations
	formatted = formatted.replace(/\b(USA|United States|US|Canada|CA)\b/g, "");

	// Clean up any trailing commas, multiple commas, or extra spaces
	formatted = formatted
		.replace(/,\s*,/g, ",")
		.replace(/,\s*$/g, "")
		.replace(/\s{2,}/g, " ")
		.trim();

	// If there's a comma, assume it's in City, State format and keep it
	if (formatted.includes(",")) {
		const parts = formatted.split(",").map((part) => part.trim());
		return parts.filter(Boolean).join(", ");
	}

	return formatted;
};
---

<div class="performance-card border-primary-200 rounded-lg border-2">
	<div class="card-image">
		{
			imageURL ? (
				<img src={imageURL} alt={title} class="venue-image" />
			) : (
				<Image src={getBackupImage(index)} alt={title} class="venue-image" />
			)
		}
	</div>
	<div class="card-content">
		<h2 class="performance-title">{title}</h2>
		<p class="performance-date">{monthDayYearString()}</p>
		<p class="performance-time">{startToEndTimeString()}</p>
		<p class="performance-location text-sm">
			<a
				href={`https://maps.google.com/?q=${encodeURIComponent(location)}`}
				target="_blank"
				rel="noopener noreferrer"
				class="location-link"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="16"
					height="16"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
					class="location-icon"
				>
					<path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
					<circle cx="12" cy="10" r="3"></circle>
				</svg>
				{formatLocation(location)}
			</a>
		</p>
		<!-- <p class="performance-description">{description}</p> -->
		{
			timeframe === PerformanceTimeframe.Upcoming && (
				<div class="calendar-buttons">
					<a
						href={generateGoogleCalURL()}
						target="_blank"
						rel="noopener noreferrer"
						class="calendar-btn google-cal-btn"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="16"
							height="16"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="btn-icon"
						>
							<rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
							<line x1="16" y1="2" x2="16" y2="6" />
							<line x1="8" y1="2" x2="8" y2="6" />
							<line x1="3" y1="10" x2="21" y2="10" />
						</svg>
						Add to Google Calendar
					</a>
					<a
						href={generateICalContent()}
						download={`${title.replace(/\s+/g, "-")}.ics`}
						class="calendar-btn ical-btn"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="16"
							height="16"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="btn-icon"
						>
							<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
							<polyline points="7 10 12 15 17 10" />
							<line x1="12" y1="15" x2="12" y2="3" />
						</svg>
						Download iCal
					</a>
				</div>
			)
		}
	</div>
</div>

<style>
	.performance-card {
		display: flex;
		border-radius: 8px;
		overflow: hidden;
		margin: 1rem 0;
	}

	.card-image {
		flex: 0 0 200px; /* Fixed width for image column */
		background-color: #f5f5f5; /* Fallback color */
	}

	.venue-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.card-content {
		flex: 1;
		padding: 1.25rem;
	}

	.performance-title {
		font-size: 1.5rem;
		margin-bottom: 0.5rem;
		font-weight: 600;
	}

	.performance-date,
	.performance-time,
	.performance-location {
		margin: 0.25rem 0;
		color: #666;
	}

	.performance-description {
		margin-top: 0.75rem;
		margin-bottom: 1.25rem;
	}

	.calendar-buttons {
		display: flex;
		gap: 0.75rem;
		margin-top: 1rem;
		flex-wrap: wrap;
		justify-content: flex-end; /* Push buttons to the right */
	}

	.calendar-btn {
		display: inline-flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 1rem;
		border-radius: 0;
		font-size: 0.875rem;
		font-weight: 500;
		text-decoration: none;
		transition: all 0.2s ease;
		/* background-color: white; */
		border: 2px solid;
	}

	.google-cal-btn {
		border-color: #90caf9;
		background-color: #f2f8fe;
	}

	.google-cal-btn:hover {
		background-color: #bfe1fd;
	}

	.ical-btn {
		border-color: var(--color-primary-200, #a7f3d0);
		background-color: #f5fdf9;
	}

	.ical-btn:hover {
		background-color: #ccfce2;
	}

	.btn-icon {
		flex-shrink: 0;
	}

	.location-link {
		display: inline-flex;
		align-items: center;
		gap: 0.25rem;
	}

	.location-icon {
		flex-shrink: 0;
	}

	/* Make it responsive */
	@media (max-width: 640px) {
		.performance-card {
			flex-direction: column;
		}

		.card-image {
			flex: 0 0 auto;
			width: 100%;
			height: auto;
		}

		.venue-image {
			width: 100%;
			height: auto;
			aspect-ratio: 10/7; /* This makes the height 0.7 times the width */
			object-fit: cover;
		}

		.calendar-buttons {
			flex-direction: column;
			gap: 0.5rem;
			justify-content: center; /* Center buttons in column layout */
			align-items: stretch; /* Change from center to stretch */
			width: 100%; /* Ensure the container takes full width */
		}

		.calendar-btn {
			justify-content: center; /* Center text within buttons */
			width: 100%; /* Change from 80% to 100% for full width */
		}
	}
</style>
