---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import type { Artwork } from "./data/Artwork";

interface Props {
	artwork: Artwork;
	imagePosition?: "left" | "right";
}

const { artwork, imagePosition = "left" } = Astro.props as Props;
const { title, image, description } = artwork;

// Generate a unique ID for this component instance
const uniqueId = crypto.randomUUID();
const containerId = `artwork-container-${uniqueId}`;
const modalId = `image-modal-${uniqueId}`;
const closeButtonId = `close-modal-${uniqueId}`;
---

<div
	class="border-primary-200 grid w-full items-center gap-1 rounded-lg border-2 p-4 lg:grid-cols-2 lg:gap-6"
>
	<div
		class:list={[
			"aspect-[4/3] w-full cursor-pointer overflow-hidden",
			{
				"lg:order-2": imagePosition === "right",
			},
		]}
		id={containerId}
	>
		<Image
			src={image}
			alt={title}
			class="h-auto min-h-full w-full min-w-full rounded-sm object-cover"
			width={1000}
			densities={[1.5, 2]}
		/>
	</div>
	<div
		class:list={[
			"flex flex-col",
			{
				"lg:pl-6": imagePosition === "left",
				"lg:ml-auto lg:pr-6": imagePosition === "right",
			},
		]}
	>
		<div class="flex flex-col items-center lg:items-start">
			<Icon name="gridicons:image" class="text-primary-200 size-14" aria-hidden="true" />
			<hr class="border-primary-400 mt-4 mb-6 w-1/2 border-1" />
		</div>

		<h3 class="h3 tracking-widest lg:text-left">{title}</h3>
		<p class="mt-6 text-pretty lg:text-lg">{description ?? "no description provided"}</p>
	</div>
</div>

<!-- Modal for full-screen image -->
<div
	id={modalId}
	class="bg-opacity-90 fixed inset-0 z-50 flex hidden items-center justify-center bg-black p-4"
>
	<button id={closeButtonId} class="absolute top-4 right-4 text-4xl text-white">&times;</button>
	<div class="max-h-full max-w-full">
		<Image
			src={image}
			alt={title}
			class="max-h-[90vh] max-w-full object-contain"
			width={1200}
			densities={[1.5, 2]}
		/>
	</div>
</div>

<script define:vars={{ containerId, modalId, closeButtonId }}>
	// Get elements using the unique IDs passed from the component
	const imageContainer = document.getElementById(containerId);
	const modal = document.getElementById(modalId);
	const closeButton = document.getElementById(closeButtonId);

	// Open modal when image is clicked
	if (imageContainer && modal) {
		imageContainer.addEventListener("click", () => {
			modal.classList.remove("hidden");
			document.body.style.overflow = "hidden"; // Prevent scrolling when modal is open
		});
	}

	// Close modal when close button is clicked
	if (closeButton && modal) {
		closeButton.addEventListener("click", (e) => {
			e.stopPropagation();
			modal.classList.add("hidden");
			document.body.style.overflow = ""; // Restore scrolling
		});
	}

	// Close modal when clicking outside the image
	if (modal) {
		modal.addEventListener("click", (e) => {
			if (e.target === modal) {
				modal.classList.add("hidden");
				document.body.style.overflow = ""; // Restore scrolling
			}
		});
	}

	// Close modal with Escape key
	document.addEventListener("keydown", (e) => {
		if (e.key === "Escape" && modal && !modal.classList.contains("hidden")) {
			modal.classList.add("hidden");
			document.body.style.overflow = ""; // Restore scrolling
		}
	});
</script>
